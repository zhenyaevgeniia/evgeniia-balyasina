[
  {
    "line": 6,
    "elements": [
      {
        "line": 9,
        "name": "POST services",
        "description": "",
        "id": "services-scenarios;post-services",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1515021658,
              "status": "passed"
            },
            "line": 10,
            "name": "POST services is sent with body",
            "match": {
              "location": "ServicesDef.postServiceWithAttributes(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 11,
              "value": "  {\n    \"name\": \"POST service\"\n  }"
            }
          },
          {
            "result": {
              "error_message": "java.lang.IllegalStateException: Status code is not 200: 201\n\n{\n    \"createdAt\": \"2018-03-03T23:25:12.383Z\",\n    \"name\": \"POST service\",\n    \"id\": 126,\n    \"updatedAt\": \"2018-03-03T23:25:12.383Z\"\n}\n\tat api.APICore.verifyLastStatusCode(APICore.java:265)\n\tat stepdefs_api.ServicesDef.lastResponseShouldHaveStatus(ServicesDef.java:70)\n\tat âœ½.last response should have status \u0027200\u0027(src/test/resources/features/Services.feature:16)\n",
              "duration": 111564244,
              "status": "failed"
            },
            "line": 16,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 18,
            "name": "last response should be empty",
            "match": {
              "location": "ServicesDef.lastResponseShouldBeEmpty()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      },
      {
        "line": 23,
        "name": "POST services. GET services/{id}",
        "description": "",
        "id": "services-scenarios;post-services.-get-services/{id}",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 139559669,
              "status": "passed"
            },
            "line": 24,
            "name": "GET services is sent",
            "match": {
              "location": "ServicesDef.getServices()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 175385,
              "status": "passed"
            },
            "line": 25,
            "name": "total number of services is stored",
            "match": {
              "location": "ServicesDef.storeGetServicesTotalNumber()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31284641,
              "status": "passed"
            },
            "line": 26,
            "name": "POST services is sent with body",
            "match": {
              "location": "ServicesDef.postServiceWithAttributes(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 27,
              "value": "  {\n    \"name\": \"POST service for GET id\"\n  }"
            }
          },
          {
            "result": {
              "duration": 365436,
              "status": "passed"
            },
            "line": 32,
            "name": "last response should have status \u0027201\u0027",
            "match": {
              "arguments": [
                {
                  "val": "201",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11429038,
              "status": "passed"
            },
            "line": 33,
            "name": "last response should contain following data",
            "match": {
              "location": "ServicesDef.lastResponseShouldContain(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "name",
                  "POST service for GET id"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20009769,
              "status": "passed"
            },
            "line": 35,
            "name": "GET services with id of last created service",
            "match": {
              "location": "ServicesDef.getServicesByIdOfLastCreated()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 332764,
              "status": "passed"
            },
            "line": 36,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 346385,
              "status": "passed"
            },
            "line": 37,
            "name": "last response should contain last created service",
            "match": {
              "location": "ServicesDef.lastResponseShouldContainLastCreatedService()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23609985,
              "status": "passed"
            },
            "line": 38,
            "name": "GET services is sent",
            "match": {
              "location": "ServicesDef.getServices()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 591442,
              "status": "passed"
            },
            "line": 39,
            "name": "total number should be increased to 1",
            "match": {
              "location": "ServicesDef.verifyServicesTotalNumberIncreased()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      },
      {
        "line": 42,
        "name": "GET services",
        "description": "",
        "id": "services-scenarios;get-services",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 17372433,
              "status": "passed"
            },
            "line": 43,
            "name": "GET services is sent",
            "match": {
              "location": "ServicesDef.getServices()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 350991,
              "status": "passed"
            },
            "line": 44,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 368804,
              "status": "passed"
            },
            "line": 45,
            "name": "last response should not be empty",
            "match": {
              "location": "ServicesDef.lastResponseShouldNotBeEmpty()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      },
      {
        "line": 48,
        "name": "PATCH services.",
        "description": "",
        "id": "services-scenarios;patch-services.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 32185823,
              "status": "passed"
            },
            "line": 49,
            "name": "POST services is sent with body",
            "match": {
              "location": "ServicesDef.postServiceWithAttributes(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 50,
              "value": "  {\n    \"name\": \"POST service for PATCH\"\n  }"
            }
          },
          {
            "result": {
              "duration": 17410070,
              "status": "passed"
            },
            "line": 55,
            "name": "GET services is sent",
            "match": {
              "location": "ServicesDef.getServices()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 166651,
              "status": "passed"
            },
            "line": 56,
            "name": "total number of services is stored",
            "match": {
              "location": "ServicesDef.storeGetServicesTotalNumber()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17212980,
              "status": "passed"
            },
            "line": 57,
            "name": "PATCH last created service is sent with body",
            "match": {
              "location": "ServicesDef.patchLastCreatedServiceWithAttributes(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 58,
              "value": "  {\n    \"name\": \"POST service for PATCH updated\"\n  }"
            }
          },
          {
            "result": {
              "duration": 341666,
              "status": "passed"
            },
            "line": 63,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 534374,
              "status": "passed"
            },
            "line": 64,
            "name": "last response should contain following data",
            "match": {
              "location": "ServicesDef.lastResponseShouldContain(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "name",
                  "POST service for PATCH updated"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11786963,
              "status": "passed"
            },
            "line": 66,
            "name": "GET services with id of last created service",
            "match": {
              "location": "ServicesDef.getServicesByIdOfLastCreated()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 578658,
              "status": "passed"
            },
            "line": 67,
            "name": "last response should contain following data",
            "match": {
              "location": "ServicesDef.lastResponseShouldContain(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "name",
                  "POST service for PATCH updated"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12569721,
              "status": "passed"
            },
            "line": 69,
            "name": "GET services is sent",
            "match": {
              "location": "ServicesDef.getServices()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 169290,
              "status": "passed"
            },
            "line": 70,
            "name": "total number should not be changed",
            "match": {
              "location": "ServicesDef.verifyServicesTotalNumberNotChanged()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      },
      {
        "line": 73,
        "name": "DELETE services",
        "description": "",
        "id": "services-scenarios;delete-services",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 18787423,
              "status": "passed"
            },
            "line": 74,
            "name": "POST services is sent with body",
            "match": {
              "location": "ServicesDef.postServiceWithAttributes(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 75,
              "value": "  {\n    \"name\": \"POST service for DELETE\"\n  }"
            }
          },
          {
            "result": {
              "duration": 17961108,
              "status": "passed"
            },
            "line": 80,
            "name": "DELETE last created service is sent",
            "match": {
              "location": "ServicesDef.deleteLastCreatedService()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 197003,
              "status": "passed"
            },
            "line": 81,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Last Response is not empty\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertFalse(Assert.java:64)\n\tat stepdefs_api.ServicesDef.lastResponseShouldBeEmpty(ServicesDef.java:65)\n\tat âœ½.last response should be empty(src/test/resources/features/Services.feature:82)\n",
              "duration": 927534,
              "status": "failed"
            },
            "line": 82,
            "name": "last response should be empty",
            "match": {
              "location": "ServicesDef.lastResponseShouldBeEmpty()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      },
      {
        "line": 86,
        "name": "GET deleted service by ID",
        "description": "",
        "id": "services-scenarios;get-deleted-service-by-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15986735,
              "status": "passed"
            },
            "line": 87,
            "name": "POST services is sent with body",
            "match": {
              "location": "ServicesDef.postServiceWithAttributes(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 88,
              "value": "  {\n    \"name\": \"POST service for DELETE2\"\n  }"
            }
          },
          {
            "result": {
              "duration": 12411106,
              "status": "passed"
            },
            "line": 93,
            "name": "GET services is sent",
            "match": {
              "location": "ServicesDef.getServices()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 266549,
              "status": "passed"
            },
            "line": 94,
            "name": "total number of services is stored",
            "match": {
              "location": "ServicesDef.storeGetServicesTotalNumber()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26561433,
              "status": "passed"
            },
            "line": 95,
            "name": "DELETE last created service is sent",
            "match": {
              "location": "ServicesDef.deleteLastCreatedService()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1340573,
              "status": "passed"
            },
            "line": 96,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14814096,
              "status": "passed"
            },
            "line": 97,
            "name": "GET services with id of last created service",
            "match": {
              "location": "ServicesDef.getServicesByIdOfLastCreated()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 849102,
              "status": "passed"
            },
            "line": 98,
            "name": "last response should have status \u0027404\u0027",
            "match": {
              "arguments": [
                {
                  "val": "404",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10256115,
              "status": "passed"
            },
            "line": 99,
            "name": "GET services is sent",
            "match": {
              "location": "ServicesDef.getServices()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 129882,
              "status": "passed"
            },
            "line": 100,
            "name": "total number should be decreased to 1",
            "match": {
              "location": "ServicesDef.verifyServicesTotalNumberDecreased()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      }
    ],
    "name": "Services scenarios",
    "description": "",
    "id": "services-scenarios",
    "keyword": "Feature",
    "uri": "src/test/resources/features/Services.feature",
    "tags": [
      {
        "name": "@API",
        "type": "Tag",
        "location": {
          "line": 5,
          "column": 1
        }
      },
      {
        "name": "@services",
        "type": "Tag",
        "location": {
          "line": 5,
          "column": 6
        }
      }
    ]
  }
]