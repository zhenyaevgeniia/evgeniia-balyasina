[
  {
    "line": 6,
    "elements": [
      {
        "line": 9,
        "name": "POST services",
        "description": "",
        "id": "services-scenarios;post-services",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2057379324,
              "status": "passed"
            },
            "line": 10,
            "name": "POST services is sent with body",
            "match": {
              "location": "ServicesDef.postServiceWithAttributes(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 11,
              "value": "  {\n    \"name\": \"POST service\"\n  }"
            }
          },
          {
            "result": {
              "error_message": "java.lang.IllegalStateException: Status code is not 200: 201\n\n{\n    \"createdAt\": \"2018-03-04T10:58:28.388Z\",\n    \"name\": \"POST service\",\n    \"id\": 166,\n    \"updatedAt\": \"2018-03-04T10:58:28.388Z\"\n}\n\tat api.APICore.verifyLastStatusCode(APICore.java:266)\n\tat stepdefs_api.ServicesDef.lastResponseShouldHaveStatus(ServicesDef.java:71)\n\tat âœ½.last response should have status \u0027200\u0027(src/test/resources/features/Services.feature:16)\n",
              "duration": 120179351,
              "status": "failed"
            },
            "line": 16,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 18,
            "name": "last response should be empty",
            "match": {
              "location": "ServicesDef.lastResponseShouldBeEmpty()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      },
      {
        "line": 22,
        "name": "POST services. GET services/{id}",
        "description": "",
        "id": "services-scenarios;post-services.-get-services/{id}",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 177677501,
              "status": "passed"
            },
            "line": 23,
            "name": "GET \u0027services\u0027 is sent",
            "match": {
              "arguments": [
                {
                  "val": "services",
                  "offset": 5
                }
              ],
              "location": "ServicesDef.getServices(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 201851,
              "status": "passed"
            },
            "line": 24,
            "name": "total number of services is stored",
            "match": {
              "location": "ServicesDef.storeGetServicesTotalNumber()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 55005998,
              "status": "passed"
            },
            "line": 25,
            "name": "POST services is sent with body",
            "match": {
              "location": "ServicesDef.postServiceWithAttributes(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 26,
              "value": "  {\n    \"name\": \"POST service for GET id\"\n  }"
            }
          },
          {
            "result": {
              "duration": 319041,
              "status": "passed"
            },
            "line": 31,
            "name": "last response should have status \u0027201\u0027",
            "match": {
              "arguments": [
                {
                  "val": "201",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14896408,
              "status": "passed"
            },
            "line": 32,
            "name": "last response should contain following data",
            "match": {
              "location": "ServicesDef.lastResponseShouldContain(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "name",
                  "POST service for GET id"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25960472,
              "status": "passed"
            },
            "line": 34,
            "name": "GET services with id of last created service",
            "match": {
              "location": "ServicesDef.getServicesByIdOfLastCreated()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 521048,
              "status": "passed"
            },
            "line": 35,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 256609,
              "status": "passed"
            },
            "line": 36,
            "name": "last response should contain last created service",
            "match": {
              "location": "ServicesDef.lastResponseShouldContainLastCreatedService()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22855626,
              "status": "passed"
            },
            "line": 37,
            "name": "GET \u0027services\u0027 is sent",
            "match": {
              "arguments": [
                {
                  "val": "services",
                  "offset": 5
                }
              ],
              "location": "ServicesDef.getServices(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 683092,
              "status": "passed"
            },
            "line": 38,
            "name": "total number should be increased to 1",
            "match": {
              "location": "ServicesDef.verifyServicesTotalNumberIncreased()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      },
      {
        "line": 41,
        "name": "GET services",
        "description": "",
        "id": "services-scenarios;get-services",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 25292243,
              "status": "passed"
            },
            "line": 42,
            "name": "GET \u0027services\u0027 is sent",
            "match": {
              "arguments": [
                {
                  "val": "services",
                  "offset": 5
                }
              ],
              "location": "ServicesDef.getServices(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 433640,
              "status": "passed"
            },
            "line": 43,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 417605,
              "status": "passed"
            },
            "line": 44,
            "name": "last response should not be empty",
            "match": {
              "location": "ServicesDef.lastResponseShouldNotBeEmpty()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      },
      {
        "line": 47,
        "name": "PATCH services.",
        "description": "",
        "id": "services-scenarios;patch-services.",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 39231063,
              "status": "passed"
            },
            "line": 48,
            "name": "POST services is sent with body",
            "match": {
              "location": "ServicesDef.postServiceWithAttributes(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 49,
              "value": "  {\n    \"name\": \"POST service for PATCH\"\n  }"
            }
          },
          {
            "result": {
              "duration": 33103737,
              "status": "passed"
            },
            "line": 54,
            "name": "GET \u0027services\u0027 is sent",
            "match": {
              "arguments": [
                {
                  "val": "services",
                  "offset": 5
                }
              ],
              "location": "ServicesDef.getServices(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 437740,
              "status": "passed"
            },
            "line": 55,
            "name": "total number of services is stored",
            "match": {
              "location": "ServicesDef.storeGetServicesTotalNumber()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33475119,
              "status": "passed"
            },
            "line": 56,
            "name": "PATCH last created service is sent with body",
            "match": {
              "location": "ServicesDef.patchLastCreatedServiceWithAttributes(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 57,
              "value": "  {\n    \"name\": \"POST service for PATCH updated\"\n  }"
            }
          },
          {
            "result": {
              "duration": 416843,
              "status": "passed"
            },
            "line": 62,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 932497,
              "status": "passed"
            },
            "line": 63,
            "name": "last response should contain following data",
            "match": {
              "location": "ServicesDef.lastResponseShouldContain(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "name",
                  "POST service for PATCH updated"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20468801,
              "status": "passed"
            },
            "line": 65,
            "name": "GET services with id of last created service",
            "match": {
              "location": "ServicesDef.getServicesByIdOfLastCreated()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 662074,
              "status": "passed"
            },
            "line": 66,
            "name": "last response should contain following data",
            "match": {
              "location": "ServicesDef.lastResponseShouldContain(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "name",
                  "POST service for PATCH updated"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20599867,
              "status": "passed"
            },
            "line": 68,
            "name": "GET \u0027services\u0027 is sent",
            "match": {
              "arguments": [
                {
                  "val": "services",
                  "offset": 5
                }
              ],
              "location": "ServicesDef.getServices(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 259850,
              "status": "passed"
            },
            "line": 69,
            "name": "total number should not be changed",
            "match": {
              "location": "ServicesDef.verifyServicesTotalNumberNotChanged()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      },
      {
        "line": 72,
        "name": "DELETE services",
        "description": "",
        "id": "services-scenarios;delete-services",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27825999,
              "status": "passed"
            },
            "line": 73,
            "name": "POST services is sent with body",
            "match": {
              "location": "ServicesDef.postServiceWithAttributes(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 74,
              "value": "  {\n    \"name\": \"POST service for DELETE\"\n  }"
            }
          },
          {
            "result": {
              "duration": 25440060,
              "status": "passed"
            },
            "line": 79,
            "name": "DELETE last created service is sent",
            "match": {
              "location": "ServicesDef.deleteLastCreatedService()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 311876,
              "status": "passed"
            },
            "line": 80,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Last Response is not empty\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertFalse(Assert.java:64)\n\tat stepdefs_api.ServicesDef.lastResponseShouldBeEmpty(ServicesDef.java:66)\n\tat âœ½.last response should be empty(src/test/resources/features/Services.feature:81)\n",
              "duration": 1200749,
              "status": "failed"
            },
            "line": 81,
            "name": "last response should be empty",
            "match": {
              "location": "ServicesDef.lastResponseShouldBeEmpty()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      },
      {
        "line": 84,
        "name": "GET deleted service by ID",
        "description": "",
        "id": "services-scenarios;get-deleted-service-by-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 37702318,
              "status": "passed"
            },
            "line": 85,
            "name": "POST services is sent with body",
            "match": {
              "location": "ServicesDef.postServiceWithAttributes(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 86,
              "value": "  {\n    \"name\": \"POST service for DELETE2\"\n  }"
            }
          },
          {
            "result": {
              "duration": 19381579,
              "status": "passed"
            },
            "line": 91,
            "name": "GET \u0027services\u0027 is sent",
            "match": {
              "arguments": [
                {
                  "val": "services",
                  "offset": 5
                }
              ],
              "location": "ServicesDef.getServices(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 218337,
              "status": "passed"
            },
            "line": 92,
            "name": "total number of services is stored",
            "match": {
              "location": "ServicesDef.storeGetServicesTotalNumber()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 65317803,
              "status": "passed"
            },
            "line": 93,
            "name": "DELETE last created service is sent",
            "match": {
              "location": "ServicesDef.deleteLastCreatedService()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 844771,
              "status": "passed"
            },
            "line": 94,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 30696160,
              "status": "passed"
            },
            "line": 95,
            "name": "GET services with id of last created service",
            "match": {
              "location": "ServicesDef.getServicesByIdOfLastCreated()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 345529,
              "status": "passed"
            },
            "line": 96,
            "name": "last response should have status \u0027404\u0027",
            "match": {
              "arguments": [
                {
                  "val": "404",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 31712935,
              "status": "passed"
            },
            "line": 97,
            "name": "GET \u0027services\u0027 is sent",
            "match": {
              "arguments": [
                {
                  "val": "services",
                  "offset": 5
                }
              ],
              "location": "ServicesDef.getServices(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 264720,
              "status": "passed"
            },
            "line": 98,
            "name": "total number should be decreased to 1",
            "match": {
              "location": "ServicesDef.verifyServicesTotalNumberDecreased()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@services"
          }
        ]
      }
    ],
    "name": "Services scenarios",
    "description": "",
    "id": "services-scenarios",
    "keyword": "Feature",
    "uri": "src/test/resources/features/Services.feature",
    "tags": [
      {
        "name": "@API",
        "type": "Tag",
        "location": {
          "line": 5,
          "column": 1
        }
      },
      {
        "name": "@services",
        "type": "Tag",
        "location": {
          "line": 5,
          "column": 6
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 6,
        "name": "GET version",
        "description": "",
        "id": "utilities-scenarios;get-version",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 17348454,
              "status": "passed"
            },
            "line": 7,
            "name": "GET \u0027version\u0027 is sent",
            "match": {
              "arguments": [
                {
                  "val": "version",
                  "offset": 5
                }
              ],
              "location": "ServicesDef.getServices(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 598158,
              "status": "passed"
            },
            "line": 8,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20474257,
              "status": "passed"
            },
            "line": 9,
            "name": "last response should equal",
            "match": {
              "location": "ServicesDef.lastResponseShouldEqual(String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 10,
              "value": "{\n\"version\": \"1.1.0\"\n}"
            }
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@utilities"
          }
        ]
      },
      {
        "line": 17,
        "name": "GET healthcheck",
        "description": "",
        "id": "utilities-scenarios;get-healthcheck",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 144178767,
              "status": "passed"
            },
            "line": 18,
            "name": "GET \u0027healthcheck\u0027 is sent",
            "match": {
              "arguments": [
                {
                  "val": "healthcheck",
                  "offset": 5
                }
              ],
              "location": "ServicesDef.getServices(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 345819,
              "status": "passed"
            },
            "line": 19,
            "name": "last response should have status \u0027200\u0027",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 34
                }
              ],
              "location": "ServicesDef.lastResponseShouldHaveStatus(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 321520,
              "status": "passed"
            },
            "line": 20,
            "name": "last response should not be empty",
            "match": {
              "location": "ServicesDef.lastResponseShouldNotBeEmpty()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@utilities"
          }
        ]
      }
    ],
    "name": "Utilities scenarios",
    "description": "",
    "id": "utilities-scenarios",
    "keyword": "Feature",
    "uri": "src/test/resources/features/Utilites.feature",
    "tags": [
      {
        "name": "@API",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@utilities",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 6
        }
      }
    ]
  }
]